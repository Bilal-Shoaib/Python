from time import sleep
from math import inf
from copy import deepcopy
from random import choice
clear, up, cntn, x, o = '\x1b[2K', '\033[1A', 'y', 'x', 'o'
board = [[' ']*3 for _ in range(3)]
###################################################################################################################################################
def upnclear(num):
    for _ in range(num):print(up, end = clear)
def printstate(boardps):
    for row in boardps:
        print(' ' + ' | '.join(row))
        print('-----------')
    upnclear(1)
def retakeinput(boardrti):
    upnclear(6)
    print("Choose another block / InValid Syntax")
    sleep(2)
    upnclear(1)
    printstate(boardrti)
    return takeinput(boardrti)
def takeinput(boardti):   
    posti = input('Number Grid (7,8,9...): ')
    if posti.isdigit() and 0 < int(posti) < 10 :
        allposti = ['20','21','2','10','1','12','0','01','02']
        posti = allposti[int(posti)- 1]
        if boardti[int(posti[:1])][int(posti[-1:])] != ' ':
            return retakeinput(boardti)
        return posti
    else:
        return retakeinput(boardti)
def plrselect(boardp):
    emt, xm, om = 0, 0, 0
    for i in range(3):
        for j in range(3):
            emt = emt + 1 if boardp[i][j] == ' ' else emt
            xm = xm + 1 if boardp[i][j] == x else xm
            om = om + 1 if boardp[i][j] == o else om
    return x if emt == 9 or xm == om else o
def actions(boarda):return [f'{i}{j}' for i in range(3) for j in range(3) if boarda[i][j] == ' ']
def results(boardr, actionr, playerr):
    dupe = deepcopy(boardr)
    dupe[int(actionr[:1])][int(actionr[-1:])] = playerr
    return dupe
def terminal(boardt):
    for i in range(3):
        if boardt[i][0] == boardt[i][1] == boardt[i][2] != ' ':
            return boardt[i][0]
        if boardt[0][i] == boardt[1][i] == boardt[2][i] != ' ':
            return boardt[0][i]
    if boardt[1][1] == boardt[0][0] == boardt[2][2] != ' ':
        return boardt[1][1]
    if boardt[1][1] == boardt[0][2] == boardt[2][0] != ' ':
        return boardt[1][1]
    empty = sum([1 for i in range(3) for j in range(3) if boardt[i][j] == ' '])
    return '-' if empty == 0 else None
def announce(boardan, xan, oan):
    wnr = terminal(boardan)
    printstate(boardan)
    print(f'{xan} Won!!!' if wnr == x else f'{oan} Won!!!' if wnr == o else "It's a Draw :p" if wnr == '-' else '', )
def continu(boardc):
    if terminal(boardc):return input('Continue Playing? (Y)es or (N)o:  ')
####################################################################################################################################################
def minimax(boardm, playerm, alpha, beta, depth):
    if playerm == x:
        othrplyr, best = o, {'position':None, 'score':-inf}
    else:
        othrplyr, best = x, {'position':None, 'score':inf}
    if terminal(boardm) == x:
        best['score'] = (1/depth) + 1
        return best
    elif terminal(boardm) == o:
        best['score'] = (-1/depth) + 1
        return best
    elif terminal(boardm) == '-':
        best['score'] = (0*depth) + 1
        return best
    else:
        for action in actions(boardm):
            if depth < 9:
                sim_best = minimax(results(boardm, action, playerm), othrplyr, alpha, beta, depth + 1)
                sim_best['position'] = action
                if playerm == x:
                    if sim_best['score'] > best['score']:
                        best = sim_best
                    alpha = max(alpha, best['score'])
                else:
                    if sim_best['score'] < best['score']:
                        best = sim_best
                    beta = min(beta, best['score'])
                if beta <= alpha:
                    break 
            else:
                break
        return best
####################################################################################################################################################
def game(boardg, p1, p2):
    plr1, plr2, plmv1, plmv2 = p1[:-1], p2[:-1], p1[-1:], p2[-1:]
    print(f"It's {plr1}({plmv1.upper()}) vs {plr2}({plmv2.upper()}) ;)")
    while not terminal(boardg):
        printstate(boardg)
        crntplr, crntmv = (plr1, plmv1) if plmv1 == plrselect(boardg) else (plr2, plmv2)
        if crntplr == 'You' or crntplr == 'Other Player':
            boardg = results(boardg, takeinput(boardg), crntmv)
        elif crntplr == 'Computer':
            boardg = results(boardg, choice(actions(boardg)), crntmv)
            print('Thinking...')
            sleep(0.5)
        else:
            boardg = results(boardg, minimax(boardg, crntmv, -inf, inf, 0)['position'], crntmv)
            print('Thinking...')
            sleep(0.5)
        upnclear(6)
    announce(boardg, plr1 if plmv1 == x else plr2,  plr1 if plmv1 == o else plr2)
    return continu(boardg)
####################################################################################################################################################
print('Welcome to Tic Tac Toe :)')
while cntn == 'y':
    play = input('Do YOU want to play? (Y)es or (N)o:  ').lower()
    if play == 'n':
        upnclear(1)
        cntn = game(board, f'Computer{x}', f'AI{o}')
    elif play == 'y':
        play = input('Select Opponent; (C)omputer or (P)layer:  ').lower()
        if play == 'p':
            upnclear(3)
            cntn = game(board,f'You{x}', f'Other Player{o}')
        elif play == 'c':
            pck = input(f'Do you want to play as ({x.upper()}) or ({o.upper()}):  ').lower()
            if pck == x or pck == o:
                play = input('Select Difficulty; (E)asy or (G)enius:  ').lower()
                if play == 'g':
                    upnclear(5)
                    cntn = game(board, f'You{x}' if pck == x else f'AI{x}', f'You{o}' if pck == o else f'AI{o}')
                elif play == 'e':
                    upnclear(5)
                    cntn = game(board, f'You{x}' if pck == x else f'Computer{x}', f'You{o}' if pck == o else f'Computer{o}')
                else:
                    print('Invalid Choice')    
            else:
                print('Invalid Choice')
        else:
            print('Invalid Choice')
    else:
        print('Invalid Choice')
