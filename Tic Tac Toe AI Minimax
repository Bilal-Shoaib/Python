from time import sleep
from math import inf
from copy import deepcopy
from random import choice
clear, up = '\x1b[2K', '\033[1A'
board = [[' ']*3 for _ in range(3)]
####################################################################################################################################################
def upnclear(num):
    for _ in range(num):
        print(up, end = clear)
####################################################################################################################################################
def printstate(boardps):
    for row in boardps:
        print(' ' + ' | '.join(row))
        print('-----------')
    upnclear(1)
####################################################################################################################################################
def takeinput(boardti):   
    posti = input('Number Grid (7,8,9...): ')
    if posti.isdigit() and 0 < int(posti) < 10 :
        allposti = ['20','21','2','10','1','12','0','01','02']
        posti = allposti[int(posti)- 1]
        if boardti[int(posti[:1])][int(posti[-1:])] != ' ':
            upnclear(6)
            print("Choose another block")
            sleep(2)
            upnclear(1)
            printstate(boardti)
            return takeinput(boardti)
        return posti
    else:
        upnclear(6)
        print('InValid Syntax, Retry')
        sleep(2)
        upnclear(1)
        printstate(boardti)
        return takeinput(boardti)
####################################################################################################################################################
def minimax(boardm, playerm, alpha, beta, depth):
    if playerm == 'x':
        othrplyr, best = 'o', {'position':None, 'score':-inf}
    else:
        othrplyr, best = 'x', {'position':None, 'score':inf}
    if terminal(boardm) == 'x':
        best['score'] = (1/depth) + 1
        return best
    elif terminal(boardm) == 'o':
        best['score'] = (-1/depth) + 1
        return best
    elif terminal(boardm) == '-':
        best['score'] = (0*depth) + 1
        return best
    else:
        for action in actions(boardm):
            if depth < 9:
                sim_best = minimax(results(boardm, action, playerm), othrplyr, alpha, beta, depth + 1)
                sim_best['position'] = action
                if playerm == 'x':
                    if sim_best['score'] > best['score']:
                        best = sim_best
                    alpha = max(alpha, best['score'])
                else:
                    if sim_best['score'] < best['score']:
                        best = sim_best
                    beta = min(beta, best['score'])
                if beta <= alpha:
                    break 
            else:
                break
        return best
####################################################################################################################################################
def plrselect(boardp):
    xmoves, omoves, empty, player = 0, 0, 0, ''
    for row in range(3):
        for col in range(3):
            if boardp[row][col] == ' ':
                empty += 1
            elif boardp[row][col] == 'x':
                xmoves += 1
            elif boardp[row][col] == 'o':
                omoves += 1
    if empty == 9 and xmoves == 0:
        player = 'x'
    elif xmoves == omoves + 1:
        player = 'o'
    elif xmoves == omoves:
        player = 'x'
    return player
####################################################################################################################################################
def actions(boarda):
    empty, empty_spaces = 0, []
    for row in range(3):
        for col in range(3):
            if boarda[row][col] == ' ':
                empty_spaces.append(f'{row}{col}')
                empty += 1
    return empty_spaces
####################################################################################################################################################
def results(boardr, actionr, playerr):
    dupe, row, col = deepcopy(boardr), int(actionr[:1]), int(actionr[-1:])
    if (dupe[row][col] != 'x' and dupe[row][col] != 'o') or playerr == ' ':
        dupe[row][col] = playerr
        return dupe
    else:
        return boardr
####################################################################################################################################################
def terminal(boardt):
    empty = 0
    for i in range(3):
        if boardt[i][0] == boardt[i][1] == boardt[i][2] != ' ':
            return boardt[i][0]
        if boardt[0][i] == boardt[1][i] == boardt[2][i] != ' ':
            return boardt[0][i]
    if boardt[1][1] == boardt[0][0] == boardt[2][2] != ' ':
        return boardt[1][1]
    if boardt[1][1] == boardt[0][2] == boardt[2][0] != ' ':
        return boardt[1][1]
    for row in range(3):
        for col in range(3):
            if boardt[row][col] == ' ':
                empty += 1
    if empty == 0:
        return '-'
    return None
####################################################################################################################################################
def announce(boardan, x, o):
    if terminal(boardan) == 'x':
        printstate(boardan)
        print(f'{x} WON!!')
    elif terminal(boardan) == 'o':
        printstate(boardan)
        print(f'{o} WON!!')
    elif terminal(boardan) == '-':
        printstate(boardan)
        print("It's a DRAW")
####################################################################################################################################################
def continu(boardc):
    if terminal(boardc):
        cntn = input('Continue Playing? (Y)es or (N)o:  ')
        return cntn
####################################################################################################################################################
def game(boardg, p1, p2):
    plr1, plr2, plmv1, plmv2 = p1[:-1], p2[:-1], p1[-1:], p2[-1:]
    print(f"It's {plr1}({plmv1.upper()}) vs {plr2}({plmv2.upper()}) ;)")
    while not terminal(boardg):
        printstate(boardg)
        if plmv1 == plrselect(boardg):
            if plr1 == 'You':
                boardg = results(boardg, takeinput(boardg), plmv1)
            elif plr1 == 'Computer':    
                boardg = results(boardg, choice(actions(boardg)), plmv1)
                print('Thinking...')
                sleep(0.5)
            elif plr1 == 'AI':
                boardg = results(boardg, minimax(boardg, plmv1, -inf, inf, 0)['position'], plmv1)
                print('Thinking...')
                sleep(0.5)
            else:
                boardg = results(boardg, takeinput(boardg), plmv1)
        else:
            if plr2 == 'You':
                boardg = results(boardg, takeinput(boardg), plmv2)
            elif plr2 == 'Computer':    
                boardg = results(boardg, choice(actions(boardg)), plmv2)
                print('Thinking...')
                sleep(0.5)
            elif plr2 == 'AI':
                boardg = results(boardg, minimax(boardg, plmv2, -inf, inf, 0)['position'], plmv2)
                print('Thinking...')
                sleep(0.5)
            else:
                boardg = results(boardg, takeinput(boardg), plmv2)
        upnclear(6)
    announce(boardg, plr1 if plmv1 == 'x' else plr2,  plr1 if plmv1 == 'o' else plr2)
    return continu(boardg)
####################################################################################################################################################
cntn = 'y'
while cntn == 'y':
    play = input('Do YOU want to play Tic Tac Toe? (Y)es or (N)o:  ').lower()
    if play == 'n':
        upnclear(3)
        cntn = game(board, 'Computerx', 'AIo')
    elif play == 'y':
        play = input('Select Opponent; (C)omputer or (P)layer:  ').lower()
        if play == 'p':
            upnclear(2)
            cntn = game(board,'Youx', 'Another Playero')
        elif play == 'c':
            play = input('Select Difficulty; (E)asy or (G)enius:  ').lower()
            if play == 'g':
                play = input('Do you want to play as (X) or (O):  ').lower()
                upnclear(5)
                cntn = game(board, 'Youx' if play == 'x' else 'AIx', 'Youo' if play == 'o' else 'AIo')
            elif play == 'e':
                play = input('Do you want to play as (X) or (O):  ').lower()
                upnclear(5)
                cntn = game(board, 'Youx' if play == 'x' else 'Computerx', 'Youo' if play == 'o' else 'Computero')
            else:
                print('Invalid Choice')
        else:
            print('Invalid Choice')
    else:
        print('Invalid Choice')
