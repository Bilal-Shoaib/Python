import time
import math
import copy
import random
LINE_CLEAR = '\x1b[2K'
LINE_UP = '\033[1A'

board = [[' ']*3 for j in range(3)]

def lineupnclear(num):
    x = 0
    while x < num:
        print(LINE_UP, end = LINE_CLEAR)
        x += 1
#########################################

def printstate(boardps):
    for row in boardps:
        dft = str(row)
        dft = dft.replace(',', ' |')
        dft = dft.replace('[', ' ')
        dft = dft.replace("'", '')
        row = dft.replace(']', ' ')
        print(row)
        print('-----------')
    print(LINE_UP, end = LINE_CLEAR)
######################################

def takeinput(boardti):    
    posti = input('row,col: ')
    if int(posti[:1]) > 2 or int(posti[-1:]) < 0 or posti[1:2] != ',' :        
        lineupnclear(6)
        print('InValid Syntax, Retry')
        time.sleep(2)
        lineupnclear(1)
        printstate(boardti)
        posti = input('row,col: ')
    if board[int(posti[:1])][int(posti[-1:])] == 'x' or board[int(posti[:1])][int(posti[-1:])] == 'o':
        lineupnclear(6)
        print("Choose another block")
        lineupnclear(1)
        time.sleep(2)
        printstate(boardti)
        posti = input('row,col: ')
    return posti
#######################################################################################################

def minimax(boardm, playerm, alpha, beta, depth):
    if playerm == 'x':
        othrplayer = 'o'
        best = {'position':None, 'score':-math.inf}
    else:
        othrplayer = 'x'
        best = {'position':None, 'score':math.inf}
    if terminal(boardm):
        if utility(boardm) == 1:
            best['score'] = 1/depth + 1
            return best
        elif utility(boardm) == -1:
            best['score'] = -1/depth + 1
            return best
        else:
            best['score'] = 0*depth + 1
            return best
    for action in actions(boardm):
        if depth < 9:
            dupe = results(boardm, action, playerm)
            sim_best = minimax(dupe, othrplayer, alpha, beta, depth + 1)
            dupe = results(boardm, action, ' ')
            sim_best['position'] = action
            if playerm == 'x':
                if sim_best['score'] > best['score']:
                    best = sim_best
                alpha = max(alpha, best['score'])
                if beta <= alpha:
                    break
            else:
                if sim_best['score'] < best['score']:
                    best = sim_best
                beta = min(beta, best['score'])
                if beta <= alpha:
                    break 
        else:
            break
    return best
##########################################################################
def plrselect(boardp):
    xmoves = 0
    omoves = 0
    empty = 0
    player = ''
    for row in range(3):
        for col in range(3):
            if boardp[row][col] == ' ':
                empty += 1
            elif boardp[row][col] == 'x':
                xmoves += 1
            elif boardp[row][col] == 'o':
                omoves += 1
    if empty == 9 and xmoves == 0:
        player = 'x'
    elif xmoves == omoves + 1:
        player = 'o'
    elif xmoves == omoves:
        player = 'x'
    return player
###########################################

def actions(boarda):
    empty = 0
    empty_spaces = []
    for row in range(3):
        for col in range(3):
            if boarda[row][col] == ' ':
                empty_spaces.append(f'{row},{col}')
                empty += 1
    return empty_spaces
#####################################################

def results(boardr, actionr, playerr):
    dupe = copy.deepcopy(boardr)
    row = int(actionr[:1])
    col = int(actionr[-1:])
    if (dupe[row][col] != 'x' and dupe[row][col] != 'o') or playerr == ' ':
        dupe[row][col] = playerr
        return dupe
    else:
        return boardr
############################################################################

def utility(boardu):
    if winner(boardu) == 'x':
        return 1
    elif winner(boardu) == 'o':
        return -1
    else:
        return 0
###############################

def terminal(boardt):
    flag = False       
    empty = 0
    for row in range(3):
        for col in range(3):
            if boardt[row][col] == ' ':
                empty += 1
    if empty == 0:
        flag = True
    if winner(boardt) == 'x' or winner(boardt) == 'o':
        flag = True
    return flag
######################################################

def winner(boardw):
    win = None
    for row in range(3):
        col = 0
        if boardw[row][col] == boardw[row][col + 1] == boardw[row][col + 2] == 'x':
                win = 'x'
        if boardw[row][col] == boardw[row][col + 1] == boardw[row][col + 2] == 'o':
                win = 'o'
    if win != 'x' or win != 'o':
        for col in range(3):
            row = 0
            if boardw[row][col] == boardw[row + 1][col] == boardw[row + 2][col] == 'x':
                    win = 'x'
            if boardw[row][col] == boardw[row + 1][col] == boardw[row + 2][col] == 'o':
                    win = 'o'
    if win != 'x' or win != 'o':
        if boardw[1][1] == boardw[0][0] == boardw[2][2] == 'x':
                win = 'x'
        elif boardw[1][1] == boardw[0][2] == boardw[2][0] == 'x':
                win = 'x'
        if boardw[1][1] == boardw[0][0] == boardw[2][2] == 'o':
                win = 'o'
        elif boardw[1][1] == boardw[0][2] == boardw[2][0] == 'o':
                win = 'o'
    return win
#########################################################################################

def twoplayer(board2p):
    print('Player 1 is "X"\nPlayer 2 is "O"')
    while not terminal(board2p):
        printstate(board2p)
        plr = plrselect(board2p)
        move = takeinput(board2p)
        board2p = results(board2p, move, plr)
        lineupnclear(6)
    announce(board2p)
#################################################

def geniusplayer(boardgp):
    play = input('Do you want to play as "X" or "O"   ')
    lineupnclear(5)
    if play.lower() == 'x':
        ai = 'o'
        print('You are "X" Player\nComputer is "O" Player')
    elif play.lower() == 'o':
        ai = 'x'
        print('You are "O" Player\nComputer is "X" Player')
    while not terminal(boardgp):
        printstate(boardgp)
        plr = plrselect(boardgp)
        if ai == plr:
            time.sleep(1)
            move = minimax(boardgp, ai, -math.inf, math.inf, 0)['position']
            boardgp = results(boardgp, move, plr)
            print('------------')
        else:
            move = takeinput(boardgp)
            boardgp = results(boardgp, move, plr)
        lineupnclear(6)
    announce(boardgp)
############################################################################

def ezplayer(boardep):
    play = input('Do you want to play as "X" or "O"   ')
    lineupnclear(5)
    if play.lower() == 'x':
        comp = 'o'
        print('You are "X" Player\nComputer is "O" Player')
    elif play.lower() == 'o':
        comp = 'x'
        print('You are "O" Player\nComputer is "X" Player')
    while not terminal(boardep):
        printstate(boardep)
        plr = plrselect(boardep)
        if comp == plr:
            time.sleep(1)
            action = actions(boardep)
            move = random.choice(action)
            boardep = results(boardep, move, plr)
            print('------------')
        else:
            move = takeinput(boardep)
            boardep = results(boardep, move, plr)
        lineupnclear(6)
    announce(boardep)
##############################################################

def announce(boardan):
    if terminal(boardan):
        if utility(boardan) == 1:
            printstate(boardan)
            print('X Player Wins the game')
        elif utility(boardan) == -1:
            printstate(boardan)
            print('O Player Wins the game')
        else:
            printstate(boardan)
            print("It's a DRAW")
############################################

play = input('Do you want to play Tic Tac Toe? (Y/N)   ')
if play.lower() == 'n':
    time.sleep(0.5)
    print('Bye, see you soon')
elif play.lower() == 'y':
    time.sleep(0.5)
    play = input('Do you want to play against a Computer or a Player?   ')
    if play.lower() == 'player':
        lineupnclear(2)
        twoplayer(board)
    elif play.lower() == 'computer':
        time.sleep(0.5)
        play = input('Select Difficulty: Easy or Genius   ')
        if play.lower() == 'genius':
            time.sleep(0.5)
            geniusplayer(board)
        elif play.lower() == 'easy':
            time.sleep(0.5)
            ezplayer(board)
        else:
            print('Invalid Choice')
    else:
        print('Invalid Choice')
else:
    print('Invalid Choice')
